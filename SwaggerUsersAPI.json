{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Swagger Test"
  },
  "host": "reqres.in",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "paths": {
    "/unknown/{findById}": {
      "get": {
        "tags": [
          "userDetails"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "findById",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/unknown"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/users/{Id}": {
      "parameters": [
        {
          "name": "Id",
          "in": "path",
          "description": "ID of pet that needs to be fetched",
          "required": true,
          "type": "integer",
          "maximum": 10,
          "minimum": 1,
          "format": "int64"
        }
      ],
      "get": {
        "tags": [
          "usersbyId"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "updateUser"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersReq"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "deleteUser"
        ],
        "summary": "Deletes a user",
        "responses": {
          "204": {
            "description": "user was deleted successfully."
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "order placed for purchasing the pet",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/usersDeatil"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UsersData"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "UsersReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The user name."
        },
        "job": {
          "type": "string",
          "description": "The user name."
        }
      },
      "xml": {
        "name": "UsersReq"
      }
    },
    "unknown": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string",
              "description": "The user name."
            },
            "year": {
              "type": "string",
              "description": "The user name."
            },
            "color": {
              "type": "string",
              "description": "The user name."
            },
            "pantone_value": {
              "type": "string",
              "description": "The user name."
            }
          }
        }
      }
    },
    "usersDeatil": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "total_pages": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "first_name": {
              "type": "string",
              "description": "The user name."
            },
            "last_name": {
              "type": "string",
              "description": "The user name."
            },
            "avatar": {
              "type": "string",
              "description": "Base64-encoded contents of the avatar image"
            }
          }
        }
      },
      "xml": {
        "name": "usersDeatil"
      }
    },
    "UsersData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The user name."
        },
        "job": {
          "type": "string",
          "description": "The user name."
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "description": "The user name."
        }
      },
      "xml": {
        "name": "UsersData"
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "first_name": {
              "type": "string",
              "description": "The user name."
            },
            "last_name": {
              "type": "string",
              "description": "The user name."
            },
            "avatar": {
              "type": "string",
              "description": "Base64-encoded contents of the avatar image"
            }
          }
        }
      },
      "xml": {
        "name": "Users"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Api",
    "url": "https://reqres.in/"
  }
}